<?php/** * Go! OOP&AOP PHP framework * * @copyright     Copyright 2011, Lissachenko Alexander <lisachenko.it@gmail.com> * @license       http://www.opensource.org/licenses/mit-license.php The MIT License */namespace Go\Aop\Framework;use Go\Aop\Intercept\MethodInvocation;use PHPUnit_Framework_TestCase as TestCase;abstract class AbstractMethodInterceptorTest extends TestCase{    /**     * Returns a test advice that writes itself to the sequence     *     * @param array $sequenceRecorder     * @return callable     */    protected function getAdvice(&$sequenceRecorder)    {        return function () use (&$sequenceRecorder) {            $sequenceRecorder[] = 'advice';            return 'advice';        };    }    /**     * Returns an empty invocation that can update the sequence on invocation     *     * @param array $sequenceRecorder     * @return \PHPUnit_Framework_MockObject_MockObject|MethodInvocation     */    protected function getInvocation(&$sequenceRecorder, $throwException = false)    {        $invocation = $this->getMock('Go\Aop\Intercept\MethodInvocation');        $invocation            ->expects($this->any())            ->method('proceed')            ->will(                $this->returnCallback(                    function () use (&$sequenceRecorder, $throwException) {                        $sequenceRecorder[] = 'invocation';                        if ($throwException) {                            throw new \RuntimeException('Expected exception');                        }                        return 'invocation';                    }                )            );        return $invocation;    }} 